---
export const partial = true;

import { z } from "astro/zod";
import { Card, CardHeader, CardContent } from "../../components/card";
import { EncodeProps, resolveProps } from "@/utils.tsx";

type Props = {
  id: string;
  name: string;
};

const { id, name: initialName } = await resolveProps(Astro);

let fieldErrors: { id?: string[]; name?: string[] } = {};
let name = initialName;
let success = false;

if (Astro.request.method === "POST") await handlePost();

async function handlePost() {
  const request = Astro.request.clone();
  const formData = await request.formData();
  if (formData.get("type") !== id) return;

  const obj = Object.fromEntries(formData.entries());
  const parsed = z.object({ name: z.string().min(2) }).safeParse(obj);

  if (!parsed.success) {
    fieldErrors = parsed.error.formErrors.fieldErrors;
  } else {
    name = parsed.data.name;
    success = true;
  }
}
---

<div x-data="partial" data-partial={`form-${id}`}>
  <Card>
    {
      success && (
        <div class="bg-green-200 text-green-950 px-2 py-1 text-sm rounded">
          Success!
        </div>
      )
    }
    <form
      transition:name={`form-${id}`}
      method="POST"
      @submit.prevent="submit"
      data-astro-reload
    >
      <EncodeProps {...Astro.props} />
      <CardHeader>
        <input type="hidden" name="type" value={id} />
        <input type="text" name="name" class="bg-background" value={name} />
        {
          fieldErrors.name && (
            <ul>
              {fieldErrors.name.map((error) => (
                <li class="bg-red-200 text-red-950 px-2 py-1 text-sm rounded">
                  {error}
                </li>
              ))}
            </ul>
          )
        }
        <CardContent>
          <p>0 sounds</p>
        </CardContent>
      </CardHeader>
    </form>
  </Card>
</div>

<script>
  import Alpine from "alpinejs";
  import { navigate, supportsViewTransitions } from "astro:transitions/client";

  Alpine.data("partial", () => {
    return {
      submit() {
        const formData = new FormData(this.$el as HTMLFormElement);
        const partialBoundary = this.$el.closest("[data-partial]");
        if (!partialBoundary) {
          return navigate(window.location.pathname, { formData });
        }
        const partialId = partialBoundary.getAttribute("data-partial")!;

        fetch("/boards/SoundForm", {
          method: "POST",
          body: formData,
        }).then(async (response) => {
          if (!response.ok) {
            navigate(window.location.pathname, { formData });
          }
          const htmlString = await response.text();
          const html = new DOMParser().parseFromString(htmlString, "text/html");
          const incoming = html.querySelector(`[data-partial=${partialId}]`);

          if (incoming) {
            if (supportsViewTransitions) {
              document.startViewTransition(() =>
                partialBoundary.replaceWith(incoming)
              );
            } else {
              partialBoundary.replaceWith(incoming);
            }
          } else {
            navigate(window.location.pathname, { formData });
          }
        });
      },
    };
  });
</script>
