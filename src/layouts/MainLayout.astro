---
import Logo from "@/components/Logo.html";
import "@/global.css";
import { ViewTransitions } from "astro:transitions";

// const session = await Astro.locals.auth.validate();
// const user = session?.user;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>WOMP</title>
    <ViewTransitions handleForms />
  </head>
  <body class="dark">
    <nav class="bg-card py-2 px-3 mb-4">
      <div class="flex justify-between items-center max-w-screen-xl mx-auto">
        <a href="/boards/"><Logo /></a>
      </div>
    </nav>
    <slot />

    <script>
      import {
        navigate,
        supportsViewTransitions,
        transitionEnabledOnThisPage,
      } from "astro:transitions/client";

      class PartialBoundary extends HTMLElement {
        constructor() {
          super();
        }
        connectedCallback() {
          const forms = this.querySelectorAll("form");
          forms.forEach((form) => {
            // disable Astro's default submit handler
            form.setAttribute("data-astro-reload", "true");
            form.addEventListener("submit", (e) => this.submitCallback(e));
          });
        }

        private submitCallback(event: SubmitEvent) {
          event.preventDefault();
          const formData = new FormData(event.target as HTMLFormElement);
          fetch("/boards/SoundForm", {
            method: "POST",
            body: formData,
          }).then(async (response) => {
            if (!response.ok) {
              return navigate(window.location.pathname, { formData });
            }
            const htmlString = await response.text();
            const html = new DOMParser().parseFromString(
              htmlString,
              "text/html"
            );
            const incoming = html.querySelector("partial-boundary");
            if (!incoming) {
              return navigate(window.location.pathname, { formData });
            }

            if (transitionEnabledOnThisPage() && supportsViewTransitions) {
              // @ts-expect-error
              document.startViewTransition(() => this.replaceWith(incoming));
            } else {
              this.replaceWith(incoming);
            }
          });
        }
      }

      customElements.define("partial-boundary", PartialBoundary);
    </script>
  </body>
</html>
