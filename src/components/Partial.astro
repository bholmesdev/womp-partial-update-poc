---
import type { SearchParams } from "@/middleware";

type Props<T extends SearchParams> = {
  component(props: T): any;
  searchParams?: T;
};

const { component: Component, searchParams } = Astro.props;

function safeParseUrl(url: string) {
  try {
    return new URL(url);
  } catch {
    return null;
  }
}

const componentFileUrl = Component.moduleId
  ? safeParseUrl("file://" + Component.moduleId)
  : null;
const pagesDirUrl = safeParseUrl(import.meta.env.PAGES_DIR);
if (!(pagesDirUrl instanceof URL)) {
  throw new Error(
    "[simple:partial] Could not resolve pages directory. Did you apply the `simple:partial` integration?"
  );
}
if (!(componentFileUrl instanceof URL)) {
  throw new Error(
    "[simple:partial] Could not resolve component file path. Is your partial `component` an Astro component?"
  );
}
if (!componentFileUrl.href.startsWith(pagesDirUrl.href)) {
  throw new Error(
    "[simple:partial] Partial component is not in the pages directory. Please move to `pages` to expose as a route."
  );
}

let partialUrl = componentFileUrl.href
  .slice(pagesDirUrl.href.length)
  .replace(/\.astro$/, "");

const partialSearchParams = new URLSearchParams();
for (const [key, value] of Object.entries(searchParams ?? {})) {
  if (typeof value === "string") {
    partialSearchParams.append(key, value);
    partialSearchParams.append(key, "string");
  } else if (typeof value === "boolean") {
    partialSearchParams.append(key, value ? "true" : "false");
    partialSearchParams.append(key, "boolean");
  } else if (typeof value === "number") {
    // TODO: number parsing
    partialSearchParams.append(key, String(value));
    partialSearchParams.append(key, "number");
  } else if (value instanceof Date) {
    partialSearchParams.append(key, value.toISOString());
    partialSearchParams.append(key, "date");
  } else {
    partialSearchParams.append(key, "undefined");
    partialSearchParams.append(key, "undefined");
  }
}

partialUrl += `?${partialSearchParams.toString()}`;

const actionParams = new URLSearchParams({
  _partial: partialUrl,
});

Astro.locals.partial.formAction = `?${actionParams.toString()}`;
Astro.locals.partial.getSearchParams = () => searchParams;
---

<simple-partial>
  <Component />
</simple-partial>

<script>
  import type { PartialRedirectPayload } from "@/middleware";
  import {
    navigate,
    supportsViewTransitions,
    transitionEnabledOnThisPage,
  } from "astro:transitions/client";

  const missingUrlError = new Error(
    "[simple:partial] Missing partial URL. Did you use the Partial component?"
  );

  class PartialBoundary extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      this.initForms();
    }

    private initForms() {
      const forms = this.querySelectorAll("form");
      forms.forEach((form) => {
        // disable Astro's default submit handler
        form.setAttribute("data-astro-reload", "true");
        form.addEventListener("submit", (e) => this.submitCallback(e));
      });
    }

    private submitCallback(event: SubmitEvent) {
      event.preventDefault();
      const form = event.target as HTMLFormElement;
      const actionParams = new URLSearchParams(form.action.split("?")[1]);
      const partialUrl = actionParams.get("_partial");
      if (!partialUrl) {
        throw missingUrlError;
      }

      const formData = new FormData(form);
      fetch(partialUrl, {
        method: "POST",
        body: formData,
      }).then(async (response) => {
        if (!response.ok) {
          return navigate(form.action, { formData });
        }
        console.log([...response.headers.entries()]);
        if (response.headers.has("X-Partial-Redirect")) {
          const payload = (await response.json()) as PartialRedirectPayload;
          return navigate(payload.location);
        }

        if (response.headers.get("Content-Type") !== "text/html") {
          return navigate(form.action, { formData });
        }

        const htmlString = await response.text();
        const incomingContents = new DOMParser().parseFromString(
          htmlString,
          "text/html"
        );
        const initPartial = () => {
          this.innerHTML = incomingContents.body.innerHTML;
          this.initForms();
        };

        if (transitionEnabledOnThisPage() && supportsViewTransitions) {
          // @ts-expect-error
          document.startViewTransition(() => initPartial());
        } else {
          initPartial();
        }
      });
    }
  }

  customElements.define("simple-partial", PartialBoundary);
</script>
