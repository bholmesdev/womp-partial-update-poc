---
// TODO: use Astro's own props parser once we can expose it
import { stringify as devalueStringify } from "devalue";

type Props<T extends Record<string, any>> = {
  component(_props: T): any;
  props?: T;
};

const { component: Component, props } = Astro.props;

function safeParseUrl(url: string) {
  try {
    return new URL(url);
  } catch {
    return null;
  }
}

const componentFileUrl = Component.moduleId
  ? safeParseUrl("file://" + Component.moduleId)
  : null;
const pagesDirUrl = safeParseUrl(import.meta.env.PAGES_DIR);
if (!(pagesDirUrl instanceof URL)) {
  throw new Error(
    "[simple:partial] Could not resolve pages directory. Did you apply the `simple:partial` integration?"
  );
}
if (!(componentFileUrl instanceof URL)) {
  throw new Error(
    "[simple:partial] Could not resolve component file path. Is your partial `component` an Astro component?"
  );
}
if (!componentFileUrl.href.startsWith(pagesDirUrl.href)) {
  throw new Error(
    "[simple:partial] Partial component is not in the pages directory. Please move to `pages` to expose as a route."
  );
}

const pagePath = componentFileUrl.href
  .slice(pagesDirUrl.href.length)
  .replace(/\.astro$/, "");
---

<simple-partial data-url={pagePath} data-props={devalueStringify(props)}>
  <Component {...props} />
</simple-partial>

<script>
  import {
    navigate,
    supportsViewTransitions,
    transitionEnabledOnThisPage,
  } from "astro:transitions/client";
  import { encodeTypeInValue } from "@/utils";
  import { parse as devalueParse } from "devalue";

  const missingUrlError = new Error(
    "[simple:partial] Missing partial URL. Did you use the Partial component?"
  );

  class PartialBoundary extends HTMLElement {
    constructor() {
      super();
    }
    private url: string | undefined;
    private props: Record<string, any> | undefined;

    connectedCallback() {
      this.url = this.getAttribute("data-url") ?? undefined;
      if (!this.url) {
        throw missingUrlError;
      }
      const stringifiedProps = this.getAttribute("data-props");
      if (stringifiedProps) {
        this.props = devalueParse(stringifiedProps);
      }
      this.initForms();
    }

    private initForms() {
      const forms = this.querySelectorAll("form");
      forms.forEach((form) => {
        // disable Astro's default submit handler
        form.setAttribute("data-astro-reload", "true");
        form.addEventListener("submit", (e) => this.submitCallback(e));
      });
    }

    private submitCallback(event: SubmitEvent) {
      event.preventDefault();
      if (!this.url) {
        throw missingUrlError;
      }
      const formData = new FormData(event.target as HTMLFormElement);
      if (this.props) {
        for (const [key, value] of Object.entries(this.props)) {
          formData.set(`__partial${key}`, encodeTypeInValue(value));
        }
      }
      fetch(this.url, {
        method: "POST",
        body: formData,
      }).then(async (response) => {
        if (!response.ok) {
          return navigate(window.location.pathname, { formData });
        }
        const htmlString = await response.text();
        const incomingContents = new DOMParser().parseFromString(
          htmlString,
          "text/html"
        );
        const initPartial = () => {
          this.innerHTML = incomingContents.body.innerHTML;
          this.initForms();
        };

        if (transitionEnabledOnThisPage() && supportsViewTransitions) {
          // @ts-expect-error
          document.startViewTransition(() => initPartial());
        } else {
          initPartial();
        }
      });
    }
  }

  customElements.define("simple-partial", PartialBoundary);
</script>
